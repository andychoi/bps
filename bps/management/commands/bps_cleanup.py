import logging
from django.core.management.base import BaseCommand
from bps.models import (
    UnitOfMeasure, ConversionRate,
    Year, Version, Period,
    OrgUnit, Service, CostCenter,
    InternalOrder, CBU, SLAProfile,
    KeyFigure, PlanningLayout, PlanningLayoutYear,
    PlanningSession, DataRequest, PlanningFact,
    Position, RateCard
)

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Cleanup demo (or all) data generated by generate_demo_data command'

    def add_arguments(self, parser):
        parser.add_argument(
            '--all', action='store_true',
            help='Delete all records from BPS models (use with caution)'
        )

    def handle(self, *args, **options):
        full = options.get('all')

        if full:
            # Full wipe of all BPS-related data
            self.stdout.write(self.style.WARNING('Deleting ALL BPS data...'))
            models = [
                PlanningFact, DataRequest, PlanningSession,
                PlanningLayoutYear, PlanningLayout,
                KeyFigure, SLAProfile,
                InternalOrder, CostCenter, Service, CBU,
                OrgUnit, Period, Version, Year,
                ConversionRate, UnitOfMeasure,
                RateCard, Position,
            ]
            for m in models:
                count = m.objects.count()
                m.objects.all().delete()
                logger.info(f'Deleted {count} records of {m.__name__}')
            self.stdout.write(self.style.SUCCESS('✅ All BPS data deleted.'))
            return

        # Selective demo cleanup
        self.stdout.write(self.style.NOTICE('Performing selective demo cleanup...'))
        # 1. Planning structures and facts
        layout_codes = ['DEMOC']
        layouts = PlanningLayout.objects.filter(code__in=layout_codes)
        for layout in layouts:
            PlanningLayoutYear.objects.filter(layout=layout).delete()
            layout.delete()
            logger.info(f'Deleted PlanningLayout: {layout.code}')

        # 2. KeyFigures
        kf_codes = ['FTE', 'COST', 'LICENSE', 'ADMIN']
        KeyFigure.objects.filter(code__in=kf_codes).delete()
        logger.info(f'Deleted KeyFigures: {kf_codes}')

        # 3. SLAProfiles
        SLAProfile.objects.filter(name='Standard SLA').delete()
        logger.info('Deleted SLAProfile: Standard SLA')

        # 4. Cost centers and internal orders
        cc_codes = [f'CC{i}' for i in range(1,4)]
        io_codes = [f'IO{i}' for i in range(1,4)]
        CostCenter.objects.filter(code__in=cc_codes).delete()
        InternalOrder.objects.filter(code__in=io_codes).delete()
        logger.info(f'Deleted CostCenters: {cc_codes} and InternalOrders: {io_codes}')

        # 5. Services
        svc_codes = ['RUN', 'CHA', 'GRO']
        Service.objects.filter(code__in=svc_codes).delete()
        logger.info(f'Deleted Services: {svc_codes}')

        # 6. CBUs
        cbu_codes = [f'CBU{i}' for i in ['1','2','3']]
        CBU.objects.filter(code__in=cbu_codes).delete()
        logger.info(f'Deleted CBUs: {cbu_codes}')

        # 7. OrgUnits (divisions)
        div_codes = [f'DIV{i}' for i in range(1,4)]
        OrgUnit.objects.filter(code__in=div_codes).delete()
        logger.info(f'Deleted OrgUnits (divisions): {div_codes}')

        # 8. Periods, Versions, Years
        Period.objects.filter(code__in=[f"{i:02}" for i in range(1,13)]).delete()
        Version.objects.filter(code__in=['DRAFT', 'PLAN V1', 'PLAN V2']).delete()
        Year.objects.filter(code__in=['2024', '2025', '2026']).delete()
        logger.info('Deleted Periods 01-12, Versions DRAFT/PLAN V1/PLAN V2, Years 2024-2026')

        # 9. UnitOfMeasure and ConversionRate
        uom_codes = ['HRS', 'USD', 'EA']
        ConversionRate.objects.filter(from_uom__code__in=uom_codes, to_uom__code__in=uom_codes).delete()
        UnitOfMeasure.objects.filter(code__in=uom_codes).delete()
        logger.info(f'Deleted UoM and ConversionRates for codes: {uom_codes}')

        # 10. Positions and RateCards
        pos_count = Position.objects.count()
        Position.objects.all().delete()
        rc_count = RateCard.objects.count()
        RateCard.objects.all().delete()
        logger.info(f'Deleted {pos_count} Positions and {rc_count} RateCards')

        self.stdout.write(self.style.SUCCESS('✅ Selective demo data cleanup complete.'))